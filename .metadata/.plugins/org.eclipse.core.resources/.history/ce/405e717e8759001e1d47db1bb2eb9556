package pe.bn.com.service;

import java.util.Arrays;
import java.util.Collection;
import java.util.stream.Collectors;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.security.core.GrantedAuthority;
import org.springframework.security.core.authority.SimpleGrantedAuthority;
import org.springframework.security.core.userdetails.User;
import org.springframework.security.core.userdetails.UserDetails;
import org.springframework.security.core.userdetails.UsernameNotFoundException;
import org.springframework.stereotype.Service;

import pe.bn.com.interfaceService.IUsuarioService;
import pe.bn.com.modelo.Rol;
import pe.bn.com.modelo.Usuario;
import pe.bn.com.repository.UsuarioRepositorio;
import pe.bn.comUsuarioResgistroDTO.UsuarioRegistroDTO;

@Service
public class UsuarioService implements IUsuarioService {

	@Autowired
	private UsuarioRepositorio usuarioRepositorio;
	
	
	@Override
	public Usuario guardar(UsuarioRegistroDTO registroDTO) {

		Usuario usuario = new Usuario(registroDTO.getNombre(), registroDTO.getApellido(),
									registroDTO.getEmail(), registroDTO.getPassword(), 
									Arrays.asList(new Rol("ROLE_USER")));
		
		
		return usuarioRepositorio.save(usuario);
	}


	@Override
	public UserDetails loadUserByUsername(String username) throws UsernameNotFoundException {
		Usuario usuario = usuarioRepositorio.findByEmail(username);
		if(usuario == null) {
			throw new UsernameNotFoundException("Usuario o password inv√°lidos");
		}
		return new User(usuario.getEmail(),usuario.getPassword(), mapearAutoridadesRoles(usuario.getRoles()));
	
	}
	
	private Collection<? extends GrantedAuthority> mapearAutoridadesRoles(Collection<Rol> roles){
		return roles.stream().map(role -> new SimpleGrantedAuthority(role.getNombre())).collect(Collectors.toList());
	}

	
	
	
}
